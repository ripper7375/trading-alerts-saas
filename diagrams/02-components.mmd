graph TB
    subgraph Browser["üåê Browser / Client"]
        Dashboard["üìä Dashboard Page"]
        Charts["üìà Charts Page"]
        Alerts["üîî Alerts Page"]
        Settings["‚öôÔ∏è Settings Page"]
        Admin["üëë Admin Page"]
        Pricing["üí∞ Pricing Page"]
    end
    
    subgraph NextJS["Next.js Application Container"]
        subgraph Frontend["Frontend Layer (React Components)"]
            TradingChart["TradingView Charts<br/>(lightweight-charts)"]
            Forms["React Hook Forms<br/>(Zod validation)"]
            StateManagement["State Management<br/>(Zustand + React Query)"]
            WSClient["WebSocket Client<br/>(Socket.IO Client)"]
            ErrorBoundary["Error Boundary<br/>(React error catching)"]
        end
        
        subgraph APILayer["API Layer (Next.js Routes)"]
            AuthAPI["/api/auth/*<br/>Authentication routes"]
            UserAPI["/api/user/*<br/>User management"]
            UserAccountAPI["/api/user/account/*<br/>Account deletion"]
            IndicatorAPI["/api/indicators/*<br/>Indicator data"]
            AlertAPI["/api/alerts/*<br/>Alert management"]
            WatchlistAPI["/api/watchlist/*<br/>Watchlist management"]
            NotificationAPI["/api/notifications/*<br/>Notifications"]
            AdminAPI["/api/admin/*<br/>Admin operations"]
            SubAPI["/api/subscription<br/>Subscription info"]
            CheckoutAPI["/api/checkout<br/>Stripe checkout sessions"]
            WebhookAPI["/api/webhooks/stripe<br/>Payment webhooks"]
            InvoiceAPI["/api/invoices<br/>Invoice history"]
            HealthAPI["/api/health<br/>System health"]
        end
        
        subgraph Auth["Authentication Layer"]
            NextAuth["NextAuth.js<br/>(Session provider)"]
            JWT["JWT Tokens"]
            SessionMgmt["Session Management"]
        end
        
        subgraph Services["Business Logic"]
            MT5Client["MT5 Client<br/>(Flask API caller)"]
            AlertChecker["Alert Checker<br/>(Background jobs)"]
            EmailService["Email Service<br/>(Resend)"]
            StripeService["Stripe Service<br/>(Payment processing)"]
            ErrorHandler["Error Handler<br/>(Global error handling)"]
        end
        
        subgraph Monitoring["Error Tracking & Logging"]
            SentryClient["Sentry Client<br/>(Error capture)"]
            LoggerService["Logger Service<br/>(SystemLog writes)"]
        end
    end
    
    subgraph WebSocketServer["WebSocket Server Container"]
        SocketIO["Socket.IO Server<br/>(Real-time engine)"]
        ConnectionMgr["Connection Manager<br/>(User sessions)"]
        EventEmitter["Event Emitter<br/>(Notifications)"]
    end
    
    subgraph Flask["Flask MT5 Service Container"]
        FlaskAPI["REST API<br/>(Flask routes)"]
        MT5Connection["MT5 Connection<br/>(MetaTrader5 lib)"]
        BufferReader["Indicator Buffer Reader<br/>(Reads MQL5 buffers)"]
        FlaskErrorHandler["Error Handler<br/>(Retry logic + logging)"]
    end
    
    subgraph DataLayer["Data Layer"]
        Prisma["Prisma ORM<br/>(TypeScript)"]
        PostgresDB[("PostgreSQL<br/>Database<br/>User, Alert, SystemLog")]
        RedisCache[("Redis<br/>Cache & Queue")]
    end
    
    subgraph External["External Services"]
        SentryCloud["Sentry.io<br/>(Error tracking SaaS)"]
        ResendCloud["Resend<br/>(Email delivery)"]
        StripeCloud["Stripe<br/>(Payment processing)"]
    end
    
    Browser --> Frontend
    Frontend --> APILayer
    Frontend --> WSClient
    Frontend --> ErrorBoundary
    ErrorBoundary -.->|"Catches errors"| SentryClient
    WSClient -.->|"WebSocket"| SocketIO
    
    APILayer --> Auth
    APILayer --> Services
    APILayer --> Monitoring
    UserAccountAPI --> Prisma
    Auth --> NextAuth
    
    Services --> MT5Client
    Services --> EmailService
    Services --> StripeService
    Services --> ErrorHandler
    
    ErrorHandler --> SentryClient
    ErrorHandler --> LoggerService
    
    SentryClient -.->|"HTTPS API"| SentryCloud
    EmailService -.->|"HTTPS API"| ResendCloud
    StripeService -.->|"HTTPS API"| StripeCloud
    StripeCloud -.->|"Webhooks"| WebhookAPI
    
    MT5Client --> FlaskAPI
    FlaskAPI --> MT5Connection
    FlaskAPI --> FlaskErrorHandler
    MT5Connection --> BufferReader
    FlaskErrorHandler --> LoggerService
    
    APILayer --> Prisma
    Prisma --> PostgresDB
    
    Services --> RedisCache
    Services -.->|"Publish events"| RedisCache
    
    LoggerService --> PostgresDB
    
    SocketIO --> ConnectionMgr
    SocketIO --> EventEmitter
    SocketIO -.->|"Subscribe"| RedisCache
    EventEmitter -.->|"Emit to clients"| WSClient
    
    style Browser fill:#E3F2FD,stroke:#1976D2
    style NextJS fill:#F3E5F5,stroke:#7B1FA2
    style WebSocketServer fill:#EDE7F6,stroke:#5E35B1
    style Flask fill:#E8F5E9,stroke:#388E3C
    style DataLayer fill:#FFF3E0,stroke:#F57C00
    style External fill:#FFEBEE,stroke:#C62828
    style Monitoring fill:#FCE4EC,stroke:#AD1457
    style Frontend fill:#E8EAF6,stroke:#3F51B5
    style APILayer fill:#F3E5F5,stroke:#7B1FA2
    style Auth fill:#FFF9C4,stroke:#F57F17
    style Services fill:#E1F5FE,stroke:#01579B